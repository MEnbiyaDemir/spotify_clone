
package javaapplication2;
import java.util.ArrayList;
import java.sql.*;  
import javax.swing.table.DefaultTableModel;

public class AdminSilme extends javax.swing.JPanel {
     int combo;
    static final String JDBC_DRIVER = "com.mysql.cj.jdbc.Driver";
    static final String DOMAIN_NAME = "localhost";
    static final String DB_NAME = "muzik_dosyam";
    static final String DB_URL = "jdbc:mysql://" + DOMAIN_NAME + "/" + DB_NAME;
    
     //  Database credentials
     static final String USER = "root";//MySQL connection'ın değerlerini değiştirdiyseniz, burayıda ona göre değiştirmelisiniz.
        static final String PASS = "cZ.;dIS1g";//MySQL connection'ın değerlerini değiştirdiyseniz, burayıda ona göre değiştirmelisiniz.
    public AdminSilme() {
        initComponents();
        combo = 1;
        showList();
        combo = 2;
        showList();
        combo = 3;
        showList();
    }
public ArrayList<Onelist> useList(){
    ArrayList<Onelist> userList = new ArrayList<>();
     Connection conn = null;
       PreparedStatement psmt = null;
     
    try{
            String sql = null;
            Class.forName("com.mysql.cj.jdbc.Driver");  
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
           
     
           // SELECT li sql querylerinde kullanıyoruz.
            Onelist olist;
              
            if(combo == 1){
            sql="SELECT * FROM oynatma_listesi";
            psmt = conn.prepareStatement(sql);
             ResultSet rs = psmt.executeQuery();
             while(rs.next()){
     olist = new Onelist(rs.getString(1), rs.getString(2), rs.getString(3));
            userList.add(olist);
            }
            
            }
            if(combo == 2){
            sql="SELECT * FROM sarki";
            psmt = conn.prepareStatement(sql);
             ResultSet rs = psmt.executeQuery();
            while(rs.next()){
     olist = new Onelist(rs.getString(1), rs.getString(2), rs.getString(3), rs.getString(4), rs.getString(5), rs.getString(6), rs.getString(7), rs.getString(8));
            userList.add(olist);
            }
            
            }
            if(combo == 3){
            sql="SELECT * FROM kullanici";
            psmt = conn.prepareStatement(sql);
             ResultSet rs = psmt.executeQuery();
            while(rs.next()){
     olist = new Onelist(rs.getString(1), rs.getString(2), rs.getString(3), rs.getString(4), rs.getString(5));
            userList.add(olist);
            }
          
            } 
          
         
        } catch (SQLException se) {
            //Handle errors for JDBC
            se.printStackTrace();
        } catch (Exception e) {
            //Handle errors for Class.forName
            e.printStackTrace();
        }
    return userList;
    }
 public void showList(){
     
  ArrayList<Onelist> list = useList();
  DefaultTableModel a = null;
  int x = 0;
  Object[] row = null ;
  
  if(combo == 1){
     a = (DefaultTableModel) jTable1.getModel();  x = 3;
  row = new Object[x];
   int imax = list.size();
     for (int i = 0; i < imax; i++) {
         
         row[0] = list.get(i).getA1();
         row[1] = list.get(i).getA2();
         row[2] = list.get(i).getA3();
       
       a.addRow(row);
     }
  
  }
  if(combo == 2){
     a = (DefaultTableModel) jTable2.getModel(); x = 8;
  row = new Object[x];
   int imax = list.size();
     for (int i = 0; i < imax; i++) {
         row[0] = list.get(i).getA1();
         row[1] = list.get(i).getA2();
         row[2] = list.get(i).getA3();
         row[3] = list.get(i).getA4();
         row[4] = list.get(i).getA5();
         row[5] = list.get(i).getA6();
         row[6] = list.get(i).getA7();
         row[7] = list.get(i).getA8();
       a.addRow(row);
     }
  }
  if(combo == 3){
     a = (DefaultTableModel) jTable3.getModel(); x = 5;
   row = new Object[x];
   int imax = list.size();
     for (int i = 0; i < imax; i++) {
         
         row[0] = list.get(i).getA1();
         row[1] = list.get(i).getA2();
         row[2] = list.get(i).getA3();
         row[3] = list.get(i).getA4();
         row[4] = list.get(i).getA5();
      
       a.addRow(row);
     }
  }
  
   
 }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Sarki ID", "Sarki_Adi", "Tarih", "Sanatci", "Albüm", "Tür", "Sure", "Dinlenme_sayisi"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable2);
        if (jTable2.getColumnModel().getColumnCount() > 0) {
            jTable2.getColumnModel().getColumn(5).setHeaderValue("Tür");
            jTable2.getColumnModel().getColumn(6).setHeaderValue("Sure");
            jTable2.getColumnModel().getColumn(7).setHeaderValue("Dinlenme_sayisi");
        }

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "no", "Kullanici ID", "Sarki ID"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jTable1);

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Kullanici_id", "Kullanici_adi", "Email", "Sifre", "Abonelik_turu"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(jTable3);

        jButton1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton1.setText("GERI");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton2.setText("SECILENI SIL");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 448, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(340, 340, 340)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(340, 340, 340)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 402, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 402, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 402, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        if(jTable1.getSelectedRow() != -1){
         int no = Integer.parseInt((String) jTable1.getValueAt(jTable1.getSelectedRow(), 0));
          Connection conn = null;
       PreparedStatement psmt = null;
     
    try{
            Class.forName("com.mysql.cj.jdbc.Driver");  
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
        String query = "delete from oynatma_listesi where no_id = "+no+"";
          Statement st = conn.createStatement(); 
          
            st.executeUpdate(query);
            combo = 1;
            cleantable();
            showList();
            for (int i = 0; i < (jTable1.getRowCount()-no+1); i++) {          
           String query2 = "update oynatma_listesi set no_id = ? where  no_id = ?";
            PreparedStatement preparedStmt = conn.prepareStatement(query2);
            preparedStmt.setInt   (1,(no+i));
            preparedStmt.setInt   (2,(no+1+i));
           preparedStmt.executeUpdate();
            
        }
            combo = 1;
            cleantable();
            showList();
          } catch (SQLException se) {
            //Handle errors for JDBC
            se.printStackTrace();
        } catch (Exception e) {
            //Handle errors for Class.forName
            e.printStackTrace();
        }}
        if(jTable2.getSelectedRow() != -1){
         int no = Integer.parseInt((String) jTable2.getValueAt(jTable2.getSelectedRow(), 0));
          Connection conn = null;
       PreparedStatement psmt = null;
     
    try{
            Class.forName("com.mysql.cj.jdbc.Driver");  
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
        String query = "delete from sarki where SarkiID = "+no+"";
          Statement st = conn.createStatement(); 
            st.executeUpdate(query);
            combo = 2;
            cleantable();
            showList();
            for (int i = 0; i < (jTable2.getRowCount()-no+1); i++) {          
           String query2 = "update sarki set SarkiID = ? where  SarkiID = ?";
            PreparedStatement preparedStmt = conn.prepareStatement(query2);
            preparedStmt.setInt   (1,(no+i));
            preparedStmt.setInt   (2,(no+1+i));
           preparedStmt.executeUpdate();
            
        }
            combo = 2;
            cleantable();
            showList();
          } catch (SQLException se) {
            //Handle errors for JDBC
            se.printStackTrace();
        } catch (Exception e) {
            //Handle errors for Class.forName
            e.printStackTrace();
        }}
        if(jTable3.getSelectedRow() != -1){
         int no = Integer.parseInt((String) jTable3.getValueAt(jTable3.getSelectedRow(), 0));
          Connection conn = null;
       PreparedStatement psmt = null;
     
    try{
            Class.forName("com.mysql.cj.jdbc.Driver");  
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
        String query = "delete from kullanici where Kullanici_id = "+no+"";
          Statement st = conn.createStatement(); 
            st.executeUpdate(query);
            combo = 3;
            cleantable();
            showList();
          
            for (int i = 0; i < (jTable2.getRowCount()-no+1); i++) {          
           String query2 = "update kullanici set Kullanici_id = ? where  Kullanici_id = ?";
            PreparedStatement preparedStmt = conn.prepareStatement(query2);
            preparedStmt.setInt   (1,(no+i));
            preparedStmt.setInt   (2,(no+1+i));
           preparedStmt.executeUpdate();
            
        }
                
            combo = 3;
            cleantable();
            showList();
          } catch (SQLException se) {
            //Handle errors for JDBC
            se.printStackTrace();
        } catch (Exception e) {
            //Handle errors for Class.forName
            e.printStackTrace();
        }}
        
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        AdminPanel ap = new AdminPanel();
        jButton1.setVisible(false);
        jButton2.setVisible(false);
        jScrollPane1.setVisible(false);
        jScrollPane2.setVisible(false);
        jScrollPane3.setVisible(false);
        jTable1.setVisible(false);
        jTable2.setVisible(false);
        jTable3.setVisible(false);
        ap.setBounds(0, 0, 1006, 623);
        add(ap);
        ap.setVisible(true);
       
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    // End of variables declaration//GEN-END:variables
public void cleantable()
{
  DefaultTableModel dm = null;
  if(combo == 1)
     dm = (DefaultTableModel) jTable1.getModel();
  if(combo == 2)
     dm = (DefaultTableModel) jTable2.getModel(); 
  if(combo == 3)
     dm = (DefaultTableModel) jTable3.getModel();
int rowCount = dm.getRowCount();
//Remove rows one by one from the end of the table
for (int i = rowCount - 1; i >= 0; i--) {
    dm.removeRow(i);
}
}
public class Onelist{
String a1,a2,a3,a4,a5,a6,a7,a8;
    public Onelist(String a1,String a2, String a3, String a4, String a5, String a6, String a7, String a8){
   this.a1 = a1;
   this.a2 = a2;
   this.a3 = a3;
   this.a4 = a4;
   this.a5 = a5;
   this.a6 = a6;
   this.a7 = a7;
   this.a8 = a8;
    }
    public Onelist(String a1, String a2, String a3){
   
    this.a1 = a1;
   this.a2 = a2;
   this.a3 = a3;
  
    }
     public Onelist(String a1,String a2, String a3, String a4, String a5){
   
   this.a1 = a1;
   this.a2 = a2;
   this.a3 = a3;
   this.a4 = a4;
   this.a5 = a5;
    }
        
     
     public String getA1() {
            return a1;
        }
        public String getA2() {
            return a2;
        }

        public String getA3() {
            return a3;
        }

        public String getA4() {
            return a4;
        }

        public String getA5() {
            return a5;
        }

        public String getA6() {
            return a6;
        }

        public String getA7() {
            return a7;
        }

        public String getA8() {
            return a8;
        }
    
}

   
}
